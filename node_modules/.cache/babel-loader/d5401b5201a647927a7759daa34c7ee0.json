{"ast":null,"code":"import _regeneratorRuntime from\"/home/suyash/calendar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(keepAlive),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(rootSaga);import{all,call,spawn}from'redux-saga/effects';import{IS_PRODUCTION}from'../config/env';import{watchAndLog}from'./logger';import{watchEditReminder,watchNewReminder,watchSubmitReminder}from'./ui/reminder';/**\n * Spawns given sagas, restarting them if they throw any uncaught error.\n * @param  {...GeneratorFunction} sagas The sagas to spawn and keep alive\n */function keepAlive(){var _len,sagas,_key,_args2=arguments;return _regeneratorRuntime.wrap(function keepAlive$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:for(_len=_args2.length,sagas=new Array(_len),_key=0;_key<_len;_key++){sagas[_key]=_args2[_key];}_context2.next=3;return all(sagas.map(function(saga){return spawn(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!true){_context.next=14;break;}_context.prev=1;_context.next=4;return call(saga);case 4:return _context.abrupt(\"break\",14);case 7:_context.prev=7;_context.t0=_context[\"catch\"](1);// If an error happens it will be logged\n// and the loop will restart the saga\nconsole.groupCollapsed(\"%cSaga \".concat(saga.name,\" crashed and will be restarted...\"),\"\\n                font-size: 600;\\n                color: #DC2626;\\n                background-color: #FECACA;\\n                padding: 0.125rem 0.25rem;\\n                border-radius: 0.125rem;\\n              \");console.error(_context.t0);console.groupEnd();case 12:_context.next=0;break;case 14:case\"end\":return _context.stop();}}},_callee,null,[[1,7]]);}));}));case 3:case\"end\":return _context2.stop();}}},_marked);}export default function rootSaga(){var sagas;return _regeneratorRuntime.wrap(function rootSaga$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:sagas=[watchNewReminder,watchEditReminder,watchSubmitReminder];if(!IS_PRODUCTION){sagas.unshift(watchAndLog);}_context3.next=4;return keepAlive.apply(void 0,sagas);case 4:case\"end\":return _context3.stop();}}},_marked2);}","map":{"version":3,"sources":["/home/suyash/calendar/src/sagas/index.js"],"names":["keepAlive","rootSaga","all","call","spawn","IS_PRODUCTION","watchAndLog","watchEditReminder","watchNewReminder","watchSubmitReminder","sagas","map","saga","console","groupCollapsed","name","error","groupEnd","unshift"],"mappings":"qLAaUA,S,iDAgCeC,Q,EA7CzB,OAASC,GAAT,CAAcC,IAAd,CAAoBC,KAApB,KAAiC,oBAAjC,CACA,OAASC,aAAT,KAA8B,eAA9B,CACA,OAASC,WAAT,KAA4B,UAA5B,CACA,OACEC,iBADF,CAEEC,gBAFF,CAGEC,mBAHF,KAIO,eAJP,CAMA;AACA;AACA;AACA,GACA,QAAUT,CAAAA,SAAV,oLAAuBU,KAAvB,0CAAuBA,KAAvB,sCACE,MAAMR,CAAAA,GAAG,CACPQ,KAAK,CAACC,GAAN,CAAU,SAACC,IAAD,QACRR,CAAAA,KAAK,uCAAC,uIACG,IADH,0DAIA,MAAMD,CAAAA,IAAI,CAACS,IAAD,CAAV,CAJA,kGAQA;AACA;AACAC,OAAO,CAACC,cAAR,kBACYF,IAAI,CAACG,IADjB,8PAUAF,OAAO,CAACG,KAAR,cACAH,OAAO,CAACI,QAAR,GArBA,kGAAD,EADG,EAAV,CADO,CAAT,CADF,uDAgCA,cAAe,SAAUhB,CAAAA,QAAV,iIAEPS,KAFO,CAEC,CACZF,gBADY,CAEZD,iBAFY,CAGZE,mBAHY,CAFD,CAOb,GAAI,CAACJ,aAAL,CAAoB,CAClBK,KAAK,CAACQ,OAAN,CAAcZ,WAAd,EACD,CATY,iBAWb,MAAMN,CAAAA,SAAS,MAAT,QAAaU,KAAb,CAAN,CAXa","sourcesContent":["import { all, call, spawn } from 'redux-saga/effects';\nimport { IS_PRODUCTION } from '../config/env';\nimport { watchAndLog } from './logger';\nimport {\n  watchEditReminder,\n  watchNewReminder,\n  watchSubmitReminder,\n} from './ui/reminder';\n\n/**\n * Spawns given sagas, restarting them if they throw any uncaught error.\n * @param  {...GeneratorFunction} sagas The sagas to spawn and keep alive\n */\nfunction* keepAlive(...sagas) {\n  yield all(\n    sagas.map((saga) =>\n      spawn(function* () {\n        while (true) {\n          try {\n            // Start the worker saga\n            yield call(saga);\n            // If it finishes, exit\n            break;\n          } catch (e) {\n            // If an error happens it will be logged\n            // and the loop will restart the saga\n            console.groupCollapsed(\n              `%cSaga ${saga.name} crashed and will be restarted...`,\n              `\n                font-size: 600;\n                color: #DC2626;\n                background-color: #FECACA;\n                padding: 0.125rem 0.25rem;\n                border-radius: 0.125rem;\n              `\n            );\n            console.error(e);\n            console.groupEnd();\n          }\n        }\n      })\n    )\n  );\n}\n\nexport default function* rootSaga() {\n\n  const sagas = [\n    watchNewReminder,\n    watchEditReminder,\n    watchSubmitReminder,\n  ];\n  if (!IS_PRODUCTION) {\n    sagas.unshift(watchAndLog);\n  }\n\n  yield keepAlive(...sagas);\n}\n"]},"metadata":{},"sourceType":"module"}