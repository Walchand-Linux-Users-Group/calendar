{"ast":null,"code":"import _objectSpread from\"/home/suyash/calendar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"/home/suyash/calendar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import{DateTime,Info,Interval}from'luxon';import{APP_LOCALE}from'../config/locale';export var DAYS_IN_A_WEEK=7;export var MONTH_FORMAT='yyyy-MM';export var DATE_FORMAT='yyyy-MM-dd';export var TIME_FORMAT='hh:mm';export var DATE_REGEX=/([12]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]))/;export var TIME_REGEX=/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/;var SATURDAY_NUMBER=7;var SUNDAY_NUMBER=1;var weekendNumbers=Object.freeze([SATURDAY_NUMBER,SUNDAY_NUMBER]);/**\n * Convert the ISO week number to local week number.\n * That will make the week start from Sunday.\n * @param {number} isoWeekday ISO week number: from `1 - Monday` to `7 - Sunday`.\n */export function toLocalWeekdayNumber(isoWeekday){return isoWeekday%DAYS_IN_A_WEEK+1;}/**\n * Returns long, short, and narrow weekdays descriptions for the current `APP_LOCALE`.\n */export function getWeekdaysDescriptions(){var config={locale:APP_LOCALE};var long=Info.weekdaysFormat('long',config);var short=Info.weekdaysFormat('short',config);var narrow=Info.weekdaysFormat('narrow',config);var weekDays=Array(DAYS_IN_A_WEEK).fill(null).map(function(_,weekDayIndex){return{long:long[weekDayIndex],short:short[weekDayIndex],narrow:narrow[weekDayIndex]};});// luxon only return ISO weekdays order,\n// and we want Sunday to be the first day.\nreturn[weekDays[DAYS_IN_A_WEEK-1]].concat(_toConsumableArray(weekDays.slice(0,DAYS_IN_A_WEEK-1)));}/**\n * Returns an array for the passed date's month with trailing dates for next/previous months.\n * The array represents a calendar that starts on Sunday and ends on Saturday.\n * @param {string} dateString The date (format: `yyyy-MM`) to generate the grid from.\n */export function getMonthlyCalendarGrid(dateString){var month=DateTime.fromFormat(dateString,MONTH_FORMAT);// Get the interval for the provided month\nvar monthInterval=Interval.fromDateTimes(month.startOf('month'),month.endOf('month'));// Get offsets for trailing months\nvar firstWeekOffset=toLocalWeekdayNumber(monthInterval.start.weekday)-1;var lastWeekOffset=DAYS_IN_A_WEEK-toLocalWeekdayNumber(monthInterval.end.weekday);// Get calendar with trailing intervals\nvar calendarInterval=Interval.fromDateTimes(monthInterval.start.minus({days:firstWeekOffset>0?firstWeekOffset:0}),monthInterval.end.plus({days:lastWeekOffset}));// Map the interval to an ordered dates array that represents a calendars month.\nvar totalDays=calendarInterval.count('days');var start=calendarInterval.start;return Array(totalDays).fill(null).map(function(_,startOffset){var date=start.plus({days:startOffset});return{key:date.toFormat(DATE_FORMAT),text:date.toLocaleString({locale:APP_LOCALE,day:'numeric'}),trailing:!month.hasSame(date,'month'),isWeekend:weekendNumbers.includes(toLocalWeekdayNumber(date.weekday))};});}/**\n * Returns a localized formatted month and year string.\n * @param {string} monthString The month to get the key from.\n */export function getDisplayMonthAndYear(monthString){return DateTime.fromFormat(monthString,MONTH_FORMAT).toLocaleString({locale:APP_LOCALE,year:'numeric',month:'long'});}/**\n * Returns a date string representation of the provided DateTime.\n * @param {DateTime} dateTime\n */export function dateTimeToDateString(dateTime){return dateTime.toFormat(DATE_FORMAT,{locale:APP_LOCALE});}/**\n * Returns a time string representation of the provided DateTime.\n * @param {DateTime} date\n */export function dateTimeToTimeString(dateTime){return dateTime.toLocaleString(DateTime.TIME_24_SIMPLE);}/**\n * Returns an object with keys `date`, and `time` from milliseconds of a date.\n * @param {number} dateMillis\n */export function millisToDateTimeStrings(dateMillis){var dateTime=DateTime.fromMillis(dateMillis);return{date:dateTimeToDateString(dateTime),time:dateTimeToTimeString(dateTime)};}/**\n * Returns total milliseconds from a date and time.\n * @param {string} dateString\n * @param {string} timeString\n */export function dateTimeStringsToMillis(dateString,timeString){return DateTime.fromFormat(\"\".concat(dateString,\" \").concat(timeString),\"\".concat(DATE_FORMAT,\" \").concat(TIME_FORMAT),{locale:APP_LOCALE}).toMillis();}export function getDisplayTimeFromMillis(dateMillis){return DateTime.fromMillis(dateMillis).toLocaleString(_objectSpread(_objectSpread({},DateTime.TIME_SIMPLE),{},{locale:APP_LOCALE}));}","map":{"version":3,"sources":["/home/suyash/calendar/src/helpers/calendar.js"],"names":["DateTime","Info","Interval","APP_LOCALE","DAYS_IN_A_WEEK","MONTH_FORMAT","DATE_FORMAT","TIME_FORMAT","DATE_REGEX","TIME_REGEX","SATURDAY_NUMBER","SUNDAY_NUMBER","weekendNumbers","Object","freeze","toLocalWeekdayNumber","isoWeekday","getWeekdaysDescriptions","config","locale","long","weekdaysFormat","short","narrow","weekDays","Array","fill","map","_","weekDayIndex","slice","getMonthlyCalendarGrid","dateString","month","fromFormat","monthInterval","fromDateTimes","startOf","endOf","firstWeekOffset","start","weekday","lastWeekOffset","end","calendarInterval","minus","days","plus","totalDays","count","startOffset","date","key","toFormat","text","toLocaleString","day","trailing","hasSame","isWeekend","includes","getDisplayMonthAndYear","monthString","year","dateTimeToDateString","dateTime","dateTimeToTimeString","TIME_24_SIMPLE","millisToDateTimeStrings","dateMillis","fromMillis","time","dateTimeStringsToMillis","timeString","toMillis","getDisplayTimeFromMillis","TIME_SIMPLE"],"mappings":"+RAAA,OAASA,QAAT,CAAmBC,IAAnB,CAAyBC,QAAzB,KAAyC,OAAzC,CACA,OAASC,UAAT,KAA2B,kBAA3B,CAEA,MAAO,IAAMC,CAAAA,cAAc,CAAG,CAAvB,CACP,MAAO,IAAMC,CAAAA,YAAY,CAAG,SAArB,CACP,MAAO,IAAMC,CAAAA,WAAW,CAAG,YAApB,CACP,MAAO,IAAMC,CAAAA,WAAW,CAAG,OAApB,CAEP,MAAO,IAAMC,CAAAA,UAAU,CAAG,mDAAnB,CACP,MAAO,IAAMC,CAAAA,UAAU,CAAG,mCAAnB,CAEP,GAAMC,CAAAA,eAAe,CAAG,CAAxB,CACA,GAAMC,CAAAA,aAAa,CAAG,CAAtB,CACA,GAAMC,CAAAA,cAAc,CAAGC,MAAM,CAACC,MAAP,CAAc,CAACJ,eAAD,CAAkBC,aAAlB,CAAd,CAAvB,CAEA;AACA;AACA;AACA;AACA,GACA,MAAO,SAASI,CAAAA,oBAAT,CAA8BC,UAA9B,CAA0C,CAC/C,MAAQA,CAAAA,UAAU,CAAGZ,cAAd,CAAgC,CAAvC,CACD,CAED;AACA;AACA,GACA,MAAO,SAASa,CAAAA,uBAAT,EAAmC,CACxC,GAAMC,CAAAA,MAAM,CAAG,CAAEC,MAAM,CAAEhB,UAAV,CAAf,CACA,GAAMiB,CAAAA,IAAI,CAAGnB,IAAI,CAACoB,cAAL,CAAoB,MAApB,CAA4BH,MAA5B,CAAb,CACA,GAAMI,CAAAA,KAAK,CAAGrB,IAAI,CAACoB,cAAL,CAAoB,OAApB,CAA6BH,MAA7B,CAAd,CACA,GAAMK,CAAAA,MAAM,CAAGtB,IAAI,CAACoB,cAAL,CAAoB,QAApB,CAA8BH,MAA9B,CAAf,CAEA,GAAMM,CAAAA,QAAQ,CAAGC,KAAK,CAACrB,cAAD,CAAL,CACdsB,IADc,CACT,IADS,EAEdC,GAFc,CAEV,SAACC,CAAD,CAAIC,YAAJ,CAAqB,CACxB,MAAO,CACLT,IAAI,CAAEA,IAAI,CAACS,YAAD,CADL,CAELP,KAAK,CAAEA,KAAK,CAACO,YAAD,CAFP,CAGLN,MAAM,CAAEA,MAAM,CAACM,YAAD,CAHT,CAAP,CAKD,CARc,CAAjB,CAUA;AACA;AACA,OACEL,QAAQ,CAACpB,cAAc,CAAG,CAAlB,CADV,4BAEKoB,QAAQ,CAACM,KAAT,CAAe,CAAf,CAAkB1B,cAAc,CAAG,CAAnC,CAFL,GAID,CAED;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS2B,CAAAA,sBAAT,CAAgCC,UAAhC,CAA4C,CACjD,GAAMC,CAAAA,KAAK,CAAGjC,QAAQ,CAACkC,UAAT,CAAoBF,UAApB,CAAgC3B,YAAhC,CAAd,CAEA;AACA,GAAM8B,CAAAA,aAAa,CAAGjC,QAAQ,CAACkC,aAAT,CACpBH,KAAK,CAACI,OAAN,CAAc,OAAd,CADoB,CAEpBJ,KAAK,CAACK,KAAN,CAAY,OAAZ,CAFoB,CAAtB,CAKA;AACA,GAAMC,CAAAA,eAAe,CAAGxB,oBAAoB,CAACoB,aAAa,CAACK,KAAd,CAAoBC,OAArB,CAApB,CAAoD,CAA5E,CACA,GAAMC,CAAAA,cAAc,CAClBtC,cAAc,CAAGW,oBAAoB,CAACoB,aAAa,CAACQ,GAAd,CAAkBF,OAAnB,CADvC,CAGA;AACA,GAAMG,CAAAA,gBAAgB,CAAG1C,QAAQ,CAACkC,aAAT,CACvBD,aAAa,CAACK,KAAd,CAAoBK,KAApB,CAA0B,CACxBC,IAAI,CAAEP,eAAe,CAAG,CAAlB,CAAsBA,eAAtB,CAAwC,CADtB,CAA1B,CADuB,CAIvBJ,aAAa,CAACQ,GAAd,CAAkBI,IAAlB,CAAuB,CAAED,IAAI,CAAEJ,cAAR,CAAvB,CAJuB,CAAzB,CAOA;AACA,GAAMM,CAAAA,SAAS,CAAGJ,gBAAgB,CAACK,KAAjB,CAAuB,MAAvB,CAAlB,CACA,GAAMT,CAAAA,KAAK,CAAGI,gBAAgB,CAACJ,KAA/B,CACA,MAAOf,CAAAA,KAAK,CAACuB,SAAD,CAAL,CACJtB,IADI,CACC,IADD,EAEJC,GAFI,CAEA,SAACC,CAAD,CAAIsB,WAAJ,CAAoB,CACvB,GAAMC,CAAAA,IAAI,CAAGX,KAAK,CAACO,IAAN,CAAW,CAAED,IAAI,CAAEI,WAAR,CAAX,CAAb,CACA,MAAO,CACLE,GAAG,CAAED,IAAI,CAACE,QAAL,CAAc/C,WAAd,CADA,CAELgD,IAAI,CAAEH,IAAI,CAACI,cAAL,CAAoB,CAAEpC,MAAM,CAAEhB,UAAV,CAAsBqD,GAAG,CAAE,SAA3B,CAApB,CAFD,CAGLC,QAAQ,CAAE,CAACxB,KAAK,CAACyB,OAAN,CAAcP,IAAd,CAAoB,OAApB,CAHN,CAILQ,SAAS,CAAE/C,cAAc,CAACgD,QAAf,CAAwB7C,oBAAoB,CAACoC,IAAI,CAACV,OAAN,CAA5C,CAJN,CAAP,CAMD,CAVI,CAAP,CAWD,CAED;AACA;AACA;AACA,GACA,MAAO,SAASoB,CAAAA,sBAAT,CAAgCC,WAAhC,CAA6C,CAClD,MAAO9D,CAAAA,QAAQ,CAACkC,UAAT,CAAoB4B,WAApB,CAAiCzD,YAAjC,EAA+CkD,cAA/C,CAA8D,CACnEpC,MAAM,CAAEhB,UAD2D,CAEnE4D,IAAI,CAAE,SAF6D,CAGnE9B,KAAK,CAAE,MAH4D,CAA9D,CAAP,CAKD,CAED;AACA;AACA;AACA,GACA,MAAO,SAAS+B,CAAAA,oBAAT,CAA8BC,QAA9B,CAAwC,CAC7C,MAAOA,CAAAA,QAAQ,CAACZ,QAAT,CAAkB/C,WAAlB,CAA+B,CAAEa,MAAM,CAAEhB,UAAV,CAA/B,CAAP,CACD,CAED;AACA;AACA;AACA,GACA,MAAO,SAAS+D,CAAAA,oBAAT,CAA8BD,QAA9B,CAAwC,CAC7C,MAAOA,CAAAA,QAAQ,CAACV,cAAT,CAAwBvD,QAAQ,CAACmE,cAAjC,CAAP,CACD,CAED;AACA;AACA;AACA,GACA,MAAO,SAASC,CAAAA,uBAAT,CAAiCC,UAAjC,CAA6C,CAClD,GAAMJ,CAAAA,QAAQ,CAAGjE,QAAQ,CAACsE,UAAT,CAAoBD,UAApB,CAAjB,CAEA,MAAO,CACLlB,IAAI,CAAEa,oBAAoB,CAACC,QAAD,CADrB,CAELM,IAAI,CAAEL,oBAAoB,CAACD,QAAD,CAFrB,CAAP,CAID,CAED;AACA;AACA;AACA;AACA,GACA,MAAO,SAASO,CAAAA,uBAAT,CAAiCxC,UAAjC,CAA6CyC,UAA7C,CAAyD,CAC9D,MAAOzE,CAAAA,QAAQ,CAACkC,UAAT,WACFF,UADE,aACYyC,UADZ,YAEFnE,WAFE,aAEaC,WAFb,EAGL,CAAEY,MAAM,CAAEhB,UAAV,CAHK,EAILuE,QAJK,EAAP,CAKD,CAED,MAAO,SAASC,CAAAA,wBAAT,CAAkCN,UAAlC,CAA8C,CACnD,MAAOrE,CAAAA,QAAQ,CAACsE,UAAT,CAAoBD,UAApB,EAAgCd,cAAhC,gCACFvD,QAAQ,CAAC4E,WADP,MAELzD,MAAM,CAAEhB,UAFH,GAAP,CAID","sourcesContent":["import { DateTime, Info, Interval } from 'luxon';\nimport { APP_LOCALE } from '../config/locale';\n\nexport const DAYS_IN_A_WEEK = 7;\nexport const MONTH_FORMAT = 'yyyy-MM';\nexport const DATE_FORMAT = 'yyyy-MM-dd';\nexport const TIME_FORMAT = 'hh:mm';\n\nexport const DATE_REGEX = /([12]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]))/;\nexport const TIME_REGEX = /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/;\n\nconst SATURDAY_NUMBER = 7;\nconst SUNDAY_NUMBER = 1;\nconst weekendNumbers = Object.freeze([SATURDAY_NUMBER, SUNDAY_NUMBER]);\n\n/**\n * Convert the ISO week number to local week number.\n * That will make the week start from Sunday.\n * @param {number} isoWeekday ISO week number: from `1 - Monday` to `7 - Sunday`.\n */\nexport function toLocalWeekdayNumber(isoWeekday) {\n  return (isoWeekday % DAYS_IN_A_WEEK) + 1;\n}\n\n/**\n * Returns long, short, and narrow weekdays descriptions for the current `APP_LOCALE`.\n */\nexport function getWeekdaysDescriptions() {\n  const config = { locale: APP_LOCALE };\n  const long = Info.weekdaysFormat('long', config);\n  const short = Info.weekdaysFormat('short', config);\n  const narrow = Info.weekdaysFormat('narrow', config);\n\n  const weekDays = Array(DAYS_IN_A_WEEK)\n    .fill(null)\n    .map((_, weekDayIndex) => {\n      return {\n        long: long[weekDayIndex],\n        short: short[weekDayIndex],\n        narrow: narrow[weekDayIndex],\n      };\n    });\n\n  // luxon only return ISO weekdays order,\n  // and we want Sunday to be the first day.\n  return [\n    weekDays[DAYS_IN_A_WEEK - 1],\n    ...weekDays.slice(0, DAYS_IN_A_WEEK - 1),\n  ];\n}\n\n/**\n * Returns an array for the passed date's month with trailing dates for next/previous months.\n * The array represents a calendar that starts on Sunday and ends on Saturday.\n * @param {string} dateString The date (format: `yyyy-MM`) to generate the grid from.\n */\nexport function getMonthlyCalendarGrid(dateString) {\n  const month = DateTime.fromFormat(dateString, MONTH_FORMAT);\n\n  // Get the interval for the provided month\n  const monthInterval = Interval.fromDateTimes(\n    month.startOf('month'),\n    month.endOf('month')\n  );\n\n  // Get offsets for trailing months\n  const firstWeekOffset = toLocalWeekdayNumber(monthInterval.start.weekday) - 1;\n  const lastWeekOffset =\n    DAYS_IN_A_WEEK - toLocalWeekdayNumber(monthInterval.end.weekday);\n\n  // Get calendar with trailing intervals\n  const calendarInterval = Interval.fromDateTimes(\n    monthInterval.start.minus({\n      days: firstWeekOffset > 0 ? firstWeekOffset : 0,\n    }),\n    monthInterval.end.plus({ days: lastWeekOffset })\n  );\n\n  // Map the interval to an ordered dates array that represents a calendars month.\n  const totalDays = calendarInterval.count('days');\n  const start = calendarInterval.start;\n  return Array(totalDays)\n    .fill(null)\n    .map((_, startOffset) => {\n      const date = start.plus({ days: startOffset });\n      return {\n        key: date.toFormat(DATE_FORMAT),\n        text: date.toLocaleString({ locale: APP_LOCALE, day: 'numeric' }),\n        trailing: !month.hasSame(date, 'month'),\n        isWeekend: weekendNumbers.includes(toLocalWeekdayNumber(date.weekday)),\n      };\n    });\n}\n\n/**\n * Returns a localized formatted month and year string.\n * @param {string} monthString The month to get the key from.\n */\nexport function getDisplayMonthAndYear(monthString) {\n  return DateTime.fromFormat(monthString, MONTH_FORMAT).toLocaleString({\n    locale: APP_LOCALE,\n    year: 'numeric',\n    month: 'long',\n  });\n}\n\n/**\n * Returns a date string representation of the provided DateTime.\n * @param {DateTime} dateTime\n */\nexport function dateTimeToDateString(dateTime) {\n  return dateTime.toFormat(DATE_FORMAT, { locale: APP_LOCALE });\n}\n\n/**\n * Returns a time string representation of the provided DateTime.\n * @param {DateTime} date\n */\nexport function dateTimeToTimeString(dateTime) {\n  return dateTime.toLocaleString(DateTime.TIME_24_SIMPLE);\n}\n\n/**\n * Returns an object with keys `date`, and `time` from milliseconds of a date.\n * @param {number} dateMillis\n */\nexport function millisToDateTimeStrings(dateMillis) {\n  const dateTime = DateTime.fromMillis(dateMillis);\n\n  return {\n    date: dateTimeToDateString(dateTime),\n    time: dateTimeToTimeString(dateTime),\n  };\n}\n\n/**\n * Returns total milliseconds from a date and time.\n * @param {string} dateString\n * @param {string} timeString\n */\nexport function dateTimeStringsToMillis(dateString, timeString) {\n  return DateTime.fromFormat(\n    `${dateString} ${timeString}`,\n    `${DATE_FORMAT} ${TIME_FORMAT}`,\n    { locale: APP_LOCALE }\n  ).toMillis();\n}\n\nexport function getDisplayTimeFromMillis(dateMillis) {\n  return DateTime.fromMillis(dateMillis).toLocaleString({\n    ...DateTime.TIME_SIMPLE,\n    locale: APP_LOCALE,\n  });\n}\n"]},"metadata":{},"sourceType":"module"}