{"version":3,"sources":["actions/ui/month.js","actions/ui/reminder.js","config/locale.js","helpers/calendar.js","selectors/ui/month.js","components/icons/PlusIcon.js","components/AppHeader.js","components/calendar/MonthlyCalendarHeader.js","helpers/colors.js","components/shared/prop-types/date.js","selectors/ui/calendar.js","selectors/dates.js","selectors/reminders.js","components/calendar/MonthlyCalendarDateReminder.js","components/calendar/MonthlyCalendarDate.js","components/calendar/MonthlyCalendarGrid.js","components/calendar/MonthlyCalendar.js","selectors/ui/reminder.js","components/icons/XIcon.js","components/shared/modal/ModalHeader.js","components/shared/modal/ModalBackdrop.js","components/shared/modal/ModalResponsive.js","components/shared/forms/FormTextInput.js","components/shared/forms/FormDatePicker.js","components/shared/forms/FormErrorMessage.js","components/shared/forms/FormLabel.js","components/shared/forms/FormFieldset.js","components/shared/buttons/BaseButton.js","components/shared/forms/FormActions.js","components/icons/CheckIcon.js","components/shared/forms/FormTimePicker.js","components/reminders/ReminderColorCircle.js","components/icons/ExpandIcon.js","components/reminders/ReminderColorPickerItem.js","components/reminders/ReminderColorPicker.js","components/reminders/ReminderForm.js","components/shared/prop-types/reminder.js","components/reminders/ReminderModal.js","components/reminders/ReminderContainer.js","components/App.js","reportWebVitals.js","reducers/ui/index.js","reducers/ui/month.js","reducers/ui/reminder.js","actions/dates.js","reducers/dates.js","actions/reminders.js","reducers/index.js","reducers/reminders.js","helpers/uuid.js","sagas/ui/reminder.js","sagas/index.js","index.js"],"names":["SET_MONTH","NEW_REMINDER","EDIT_REMINDER","SUBMIT_REMINDER","OPEN_REMINDER","CLOSE_REMINDER","newReminder","initialDate","type","payload","editReminder","reminder","submitReminder","openReminder","closeReminder","APP_LOCALE","process","JC_CALENDAR_APP_LOCALE","MONTH_FORMAT","DATE_FORMAT","TIME_FORMAT","weekendNumbers","Object","freeze","toLocalWeekdayNumber","isoWeekday","getMonthlyCalendarGrid","dateString","month","DateTime","fromFormat","monthInterval","Interval","fromDateTimes","startOf","endOf","firstWeekOffset","start","weekday","lastWeekOffset","end","calendarInterval","minus","days","plus","totalDays","count","Array","fill","map","_","startOffset","date","key","toFormat","text","toLocaleString","locale","day","trailing","hasSame","isWeekend","includes","dateTimeToDateString","dateTime","dateTimeToTimeString","TIME_24_SIMPLE","millisToDateTimeStrings","dateMillis","fromMillis","time","dateTimeStringsToMillis","timeString","toMillis","getMonth","state","ui","getDisplayMonthAndYear","createSelector","monthString","year","PlusIcon","props","className","svgClassName","xmlns","width","height","viewBox","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","connect","dispatch","bindActionCreators","onClick","src","alt","MonthlyCalendarHeader","weekDays","weekDay","long","short","narrow","DEFAULT_COLOR","ALL_COLORS","getBackgroundColor","color","PropTypes","shape","string","isRequired","bool","id","event_type","topic","oneOf","number","displayTime","platform","getMonthlyCalendarGridHelper","getFormattedDateReminders","dates","dateId","reminders","dateReminders","reduce","formatted","reminderId","TIME_SIMPLE","sort","a","b","MonthlyCalendarDateReminder","tabIndex","title","classNames","ownProps","e","stopPropagation","MonthlyCalendarGrid","config","Info","weekdaysFormat","weekDayIndex","DAYS_IN_A_WEEK","slice","getWeekdaysDescriptions","getFormattedReminder","ModalHeader","children","onClose","XIcon","ModalBackdrop","handleClick","target","ref","current","createRef","this","Component","ModalResponsive","FormTextInput","field","form","touched","errors","hasError","name","Boolean","FormDatePicker","FormErrorMessage","FormLabel","htmlFor","FormFieldset","BaseButton","FormActions","CheckIcon","FormTimePicker","ReminderColorCircle","colorName","fillRule","clipRule","ReminderColorPickerItem","role","aria-selected","ReminderColorPicker","open","toggleOpen","setState","prevState","close","handleOutsideClick","contains","handleSelectColor","onChange","value","renderColorList","aria-labelledby","aria-activedescendant","filter","document","addEventListener","removeEventListener","aria-haspopup","aria-expanded","ExpandIcon","ReminderSchema","Yup","max","required","matches","ReminderForm","getInitialValues","handleSubmit","values","idVal","init","onSubmit","initialValues","validationSchema","component","placeholder","as","ReminderModal","isNew","setNavigationBarHeightCSSVariable","vh","window","innerHeight","documentElement","style","setProperty","App","local","data","first","last","minTime","maxTime","Axios","post","min","index","response","console","log","reminderToSet","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","combineReducers","action","SET_DATE_REMINDER","setDateReminder","filterDateReminders","reminderIdToExclude","filtered","existing","SET_REMINDER","setReminder","entry","from","Set","getUUID","get","uuid","generateUUID","watchNewReminder","watchEditReminder","watchSubmitReminder","put","reminderUIActions","apply","initialDateTime","parsed","isValid","set","call","dateReminder","takeEvery","keepAlive","rootSaga","sagas","all","saga","spawn","groupCollapsed","error","groupEnd","sagaMiddleware","createSagaMiddleware","store","createStore","reducers","applyMiddleware","run","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.dcbea673.chunk.js","sourcesContent":["export const SET_MONTH = 'UI/SET_MONTH';\n\nexport function setMonth(month) {\n  return {\n    type: SET_MONTH,\n    payload: month,\n  };\n}\n","export const NEW_REMINDER = 'UI/NEW_REMINDER';\nexport const EDIT_REMINDER = 'UI/EDIT_REMINDER';\nexport const SUBMIT_REMINDER = 'UI/SUBMIT_REMINDER';\n\nexport const OPEN_REMINDER = 'UI/OPEN_REMINDER';\nexport const CLOSE_REMINDER = 'UI/CLOSE_REMINDER';\n\nexport function newReminder(initialDate) {\n  return {\n    type: NEW_REMINDER,\n    payload: initialDate,\n  };\n}\n\nexport function editReminder(reminder) {\n  return {\n    type: EDIT_REMINDER,\n    payload: reminder,\n  };\n}\n\nexport function submitReminder(reminder) {\n  return {\n    type: SUBMIT_REMINDER,\n    payload: reminder,\n  };\n}\n\nexport function openReminder(reminder) {\n  return {\n    type: OPEN_REMINDER,\n    payload: reminder,\n  };\n}\n\nexport function closeReminder() {\n  return {\n    type: CLOSE_REMINDER,\n  };\n}","export const DEFAULT_LOCALE = 'en-US';\nexport const APP_LOCALE = process.env.JC_CALENDAR_APP_LOCALE ?? DEFAULT_LOCALE;\n","import { DateTime, Info, Interval } from 'luxon';\nimport { APP_LOCALE } from '../config/locale';\n\nexport const DAYS_IN_A_WEEK = 7;\nexport const MONTH_FORMAT = 'yyyy-MM';\nexport const DATE_FORMAT = 'yyyy-MM-dd';\nexport const TIME_FORMAT = 'hh:mm';\n\nexport const DATE_REGEX = /([12]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]))/;\nexport const TIME_REGEX = /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/;\n\nconst SATURDAY_NUMBER = 7;\nconst SUNDAY_NUMBER = 1;\nconst weekendNumbers = Object.freeze([SATURDAY_NUMBER, SUNDAY_NUMBER]);\n\n/**\n * Convert the ISO week number to local week number.\n * That will make the week start from Sunday.\n * @param {number} isoWeekday ISO week number: from `1 - Monday` to `7 - Sunday`.\n */\nexport function toLocalWeekdayNumber(isoWeekday) {\n  return (isoWeekday % DAYS_IN_A_WEEK) + 1;\n}\n\n/**\n * Returns long, short, and narrow weekdays descriptions for the current `APP_LOCALE`.\n */\nexport function getWeekdaysDescriptions() {\n  const config = { locale: APP_LOCALE };\n  const long = Info.weekdaysFormat('long', config);\n  const short = Info.weekdaysFormat('short', config);\n  const narrow = Info.weekdaysFormat('narrow', config);\n\n  const weekDays = Array(DAYS_IN_A_WEEK)\n    .fill(null)\n    .map((_, weekDayIndex) => {\n      return {\n        long: long[weekDayIndex],\n        short: short[weekDayIndex],\n        narrow: narrow[weekDayIndex],\n      };\n    });\n\n  // luxon only return ISO weekdays order,\n  // and we want Sunday to be the first day.\n  return [\n    weekDays[DAYS_IN_A_WEEK - 1],\n    ...weekDays.slice(0, DAYS_IN_A_WEEK - 1),\n  ];\n}\n\n/**\n * Returns an array for the passed date's month with trailing dates for next/previous months.\n * The array represents a calendar that starts on Sunday and ends on Saturday.\n * @param {string} dateString The date (format: `yyyy-MM`) to generate the grid from.\n */\nexport function getMonthlyCalendarGrid(dateString) {\n  const month = DateTime.fromFormat(dateString, MONTH_FORMAT);\n\n  // Get the interval for the provided month\n  const monthInterval = Interval.fromDateTimes(\n    month.startOf('month'),\n    month.endOf('month')\n  );\n\n  // Get offsets for trailing months\n  const firstWeekOffset = toLocalWeekdayNumber(monthInterval.start.weekday) - 1;\n  const lastWeekOffset =\n    DAYS_IN_A_WEEK - toLocalWeekdayNumber(monthInterval.end.weekday);\n\n  // Get calendar with trailing intervals\n  const calendarInterval = Interval.fromDateTimes(\n    monthInterval.start.minus({\n      days: firstWeekOffset > 0 ? firstWeekOffset : 0,\n    }),\n    monthInterval.end.plus({ days: lastWeekOffset })\n  );\n\n  // Map the interval to an ordered dates array that represents a calendars month.\n  const totalDays = calendarInterval.count('days');\n  const start = calendarInterval.start;\n  return Array(totalDays)\n    .fill(null)\n    .map((_, startOffset) => {\n      const date = start.plus({ days: startOffset });\n      return {\n        key: date.toFormat(DATE_FORMAT),\n        text: date.toLocaleString({ locale: APP_LOCALE, day: 'numeric' }),\n        trailing: !month.hasSame(date, 'month'),\n        isWeekend: weekendNumbers.includes(toLocalWeekdayNumber(date.weekday)),\n      };\n    });\n}\n\n/**\n * Returns a localized formatted month and year string.\n * @param {string} monthString The month to get the key from.\n */\nexport function getDisplayMonthAndYear(monthString) {\n  return DateTime.fromFormat(monthString, MONTH_FORMAT).toLocaleString({\n    locale: APP_LOCALE,\n    year: 'numeric',\n    month: 'long',\n  });\n}\n\n/**\n * Returns a date string representation of the provided DateTime.\n * @param {DateTime} dateTime\n */\nexport function dateTimeToDateString(dateTime) {\n  return dateTime.toFormat(DATE_FORMAT, { locale: APP_LOCALE });\n}\n\n/**\n * Returns a time string representation of the provided DateTime.\n * @param {DateTime} date\n */\nexport function dateTimeToTimeString(dateTime) {\n  return dateTime.toLocaleString(DateTime.TIME_24_SIMPLE);\n}\n\n/**\n * Returns an object with keys `date`, and `time` from milliseconds of a date.\n * @param {number} dateMillis\n */\nexport function millisToDateTimeStrings(dateMillis) {\n  const dateTime = DateTime.fromMillis(dateMillis);\n\n  return {\n    date: dateTimeToDateString(dateTime),\n    time: dateTimeToTimeString(dateTime),\n  };\n}\n\n/**\n * Returns total milliseconds from a date and time.\n * @param {string} dateString\n * @param {string} timeString\n */\nexport function dateTimeStringsToMillis(dateString, timeString) {\n  return DateTime.fromFormat(\n    `${dateString} ${timeString}`,\n    `${DATE_FORMAT} ${TIME_FORMAT}`,\n    { locale: APP_LOCALE }\n  ).toMillis();\n}\n\nexport function getDisplayTimeFromMillis(dateMillis) {\n  return DateTime.fromMillis(dateMillis).toLocaleString({\n    ...DateTime.TIME_SIMPLE,\n    locale: APP_LOCALE,\n  });\n}\n","import { createSelector } from 'reselect';\nimport { getDisplayMonthAndYear as getDisplayMonthAndYearHelper } from '../../helpers/calendar';\n\nexport const getMonth = (state) => state.ui.month;\n\nexport const getDisplayMonthAndYear = createSelector([getMonth], (month) =>\n  month !== null ? getDisplayMonthAndYearHelper(month) : ''\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst PlusIcon = (props) => {\n  return (\n    <i className={props.className}>\n      <svg\n        className={props.svgClassName}\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"24\"\n        height=\"25\"\n        viewBox=\"0 0 24 25\"\n        fill=\"none\"\n      >\n        <path\n          d=\"M12 5.5V19.5\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        />\n        <path\n          d=\"M5 12.5H19\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        />\n      </svg>\n    </i>\n  );\n};\n\nPlusIcon.propTypes = {\n  className: PropTypes.string,\n  svgClassName: PropTypes.string,\n};\n\nexport default PlusIcon;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { newReminder } from '../actions/ui/reminder';\nimport { getDisplayMonthAndYear } from '../selectors/ui/month';\nimport PlusIcon from './icons/PlusIcon';\n\nfunction AppHeader({ month, newReminder }) {\n  return (\n    <div className=\"flex px-8 py-4 flex-row gap-4 flex-nowrap shadow-lg items-center\">\n      <div className=\"w-64\">\n        <button\n          onClick={() => newReminder()}\n          type=\"button\"\n          className=\"uppercase flex flex-row flex-nowrap items-center gap-2 p-3 lg:px-4 lg:py-2 shadow rounded-full lg:rounded text-lg font-medium bg-white hover:bg-gray-200 text-indigo-700 hover:text-indigo-900 transition-colors duration-150\"\n        >\n          <PlusIcon svgClassName=\"w-6 h-6\" />\n          <span className=\"hidden lg:inline\">New Reminder</span>\n        </button>\n      </div>\n\n      <div className=\"flex-grow h-16\">\n        <center>\n        <img className=\"flex-grow h-16 object-scale-down\" src=\"data:image/png;base64, \" alt=\"WLUG Logo\" />\n        </center>\n      </div>\n\n      <div className=\"w-64\">\n        <h1 className=\"flex-none text-right text-2xl font-medium\">{month}</h1>\n      </div>\n    </div>\n  );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    month: getDisplayMonthAndYear(state),\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({ newReminder }, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AppHeader);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction MonthlyCalendarHeader({ weekDays }) {\n  return (\n    <div className=\"w-full flex-shrink p-1 bg-gradient-to-r from-indigo-700 to-purple-800 text-white shadow-md grid grid-cols-7 gap-1\">\n      {weekDays.map((weekDay) => (\n        <h3\n          key={weekDay.short}\n          className=\"px-2 py-2 text-xs sm:text-sm md:text-base lg:text-lg font-medium text-center flex items-center justify-center\"\n        >\n          <span className=\"hidden lg:inline\">{weekDay.long}</span>\n          <span className=\"hidden md:inline lg:hidden\">{weekDay.short}</span>\n          <span className=\"inline md:hidden\">{weekDay.narrow}</span>\n        </h3>\n      ))}\n    </div>\n  );\n}\n\nMonthlyCalendarHeader.propTypes = {\n  weekDays: PropTypes.arrayOf(\n    PropTypes.shape({\n      long: PropTypes.string.isRequired,\n      short: PropTypes.string.isRequired,\n      narrow: PropTypes.string.isRequired,\n    }).isRequired\n  ).isRequired,\n};\n\nexport default MonthlyCalendarHeader;\n","export const DEFAULT_COLOR = 'indigo-600';\nexport const GRASS_GREEN = 'green-600';\nexport const RED_DANGER = 'red-500';\nexport const BRIGHT_PINK = 'pink-600';\nexport const SWEET_PURPLE = 'purple-500';\nexport const BRIGHT_YELLOW = 'yellow-400';\nexport const SKY_BLUE = 'blue-500';\n\nexport const ALL_COLORS = Object.freeze([\n  DEFAULT_COLOR,\n  GRASS_GREEN,\n  RED_DANGER,\n  BRIGHT_PINK,\n  SWEET_PURPLE,\n  BRIGHT_YELLOW,\n  SKY_BLUE,\n]);\n\nexport function getBackgroundColor(color) {\n  return `bg-${color}`;\n}\n\nexport function getTextColor(color) {\n  return `text-${color}`;\n}\n","import PropTypes from 'prop-types';\nimport { ALL_COLORS } from '../../../helpers/colors';\n\nexport const DatePropType = PropTypes.shape({\n  key: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired,\n  trailing: PropTypes.bool.isRequired,\n  isWeekend: PropTypes.bool.isRequired,\n});\n\nexport const DateReminderPropType = PropTypes.shape({\n  id: PropTypes.string,\n  event_type: PropTypes.string.isRequired,\n  topic: PropTypes.string.isRequired,\n  color: PropTypes.oneOf(ALL_COLORS).isRequired,\n  dateTime: PropTypes.number.isRequired,\n  displayTime: PropTypes.string.isRequired,\n  platform: PropTypes.string.isRequired,\n});\n","import { createSelector } from 'reselect';\nimport {\n  getDisplayTimeFromMillis,\n  getMonthlyCalendarGrid as getMonthlyCalendarGridHelper,\n} from '../../helpers/calendar';\nimport { getDateReminders } from '../dates';\nimport { getReminders } from '../reminders';\nimport { getMonth } from './month';\n\nexport const getMonthlyCalendarGrid = createSelector([getMonth], (month) => {\n  return month !== null ? getMonthlyCalendarGridHelper(month) : [];\n});\n\nexport const getFormattedDateReminders = createSelector(\n  [getDateReminders, getReminders],\n  (dateReminders, reminders) => {\n    if (!dateReminders || !reminders) return [];\n\n    return dateReminders\n      .reduce((formatted, reminderId) => {\n        const reminder = reminders[reminderId];\n        return reminder\n          ? [\n              ...formatted,\n              {\n                ...reminder,\n                displayTime: getDisplayTimeFromMillis(reminder.dateTime),\n              },\n            ]\n          : formatted;\n      }, [])\n      .sort((a, b) => a.dateTime - b.dateTime);\n  }\n);\n","export const getDateReminders = (state, props) =>\n  state.dates?.[props.dateId]?.reminders;\n","export const getReminders = (state) => state.reminders;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { DateReminderPropType } from '../shared/prop-types/date';\nimport { getBackgroundColor, getTextColor } from '../../helpers/colors';\n\nfunction MonthlyCalendarDateReminder({ reminder, onClick }) {\n  return (\n    <li\n      tabIndex={0}\n      onClick={onClick}\n      title={`${reminder.displayTime} - ${reminder.platform}\\nClick to Edit.`}\n      className={classNames(\n        'py-px hover:bg-gray-200 text-gray-900 rounded cursor-pointer text-xs font-normal truncate flex flex-row flex-nowrap items-center gap-2',\n        `hover:${getTextColor(reminder.color)}`\n      )}\n    >\n      <div\n        className={classNames(\n          'w-2 h-2 rounded-full flex-shrink-0',\n          getBackgroundColor(reminder.color)\n        )}\n      />\n      {reminder.displayTime} - {reminder.event_type}\n    </li>\n  );\n}\n\nMonthlyCalendarDateReminder.propTypes = {\n  reminder: DateReminderPropType.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default MonthlyCalendarDateReminder;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { DatePropType, DateReminderPropType } from '../shared/prop-types/date';\nimport { getFormattedDateReminders } from '../../selectors/ui/calendar';\nimport { editReminder, newReminder } from '../../actions/ui/reminder';\nimport MonthlyCalendarDateReminder from './MonthlyCalendarDateReminder';\n\nfunction MonthlyCalendarDate({ date, reminders, editReminder, newReminder }) {\n  return (\n    <li\n      key={date.key}\n      onClick={() => newReminder(date.key)}\n      className={classNames(\n        'h-auto px-3 py-2 bg-white text-lg overflow-hidden',\n        {\n          'font-normal': !date.isWeekend,\n          'text-indigo-600 font-bold': date.isWeekend && !date.trailing,\n          'text-gray-400': date.trailing,\n        }\n      )}\n    >\n      {date.text}\n\n      <ol>\n        {reminders.map((reminder) => (\n          <MonthlyCalendarDateReminder\n            key={reminder.id}\n            reminder={reminder}\n            onClick={(e) => {\n              e.stopPropagation();\n              editReminder(reminder);\n            }}\n          />\n        ))}\n      </ol>\n    </li>\n  );\n}\n\nMonthlyCalendarDate.propTypes = {\n  date: DatePropType.isRequired,\n  reminders: PropTypes.arrayOf(DateReminderPropType.isRequired).isRequired,\n};\n\nfunction mapStateToProps(state, ownProps) {\n  return {\n    reminders: getFormattedDateReminders(state, { dateId: ownProps.date.key }),\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({ editReminder, newReminder }, dispatch);\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MonthlyCalendarDate);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { DatePropType } from '../shared/prop-types/date';\nimport MonthlyCalendarDate from './MonthlyCalendarDate';\n\nfunction MonthlyCalendarGrid({ dates }) {\n  return (\n    <ol className=\"w-full flex-grow overflow-y-auto px-1 pt-0 pb-1 bg-gray-200 grid grid-cols-7 auto-rows-fr gap-1\">\n      {dates.map((date) => (\n        <MonthlyCalendarDate key={date.key} date={date} />\n      ))}\n    </ol>\n  );\n}\n\nMonthlyCalendarGrid.propTypes = {\n  dates: PropTypes.arrayOf(DatePropType.isRequired).isRequired,\n};\n\nexport default MonthlyCalendarGrid;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { getWeekdaysDescriptions } from '../../helpers/calendar';\nimport MonthlyCalendarHeader from './MonthlyCalendarHeader';\nimport MonthlyCalendarGrid from './MonthlyCalendarGrid';\nimport { getMonthlyCalendarGrid } from '../../selectors/ui/calendar';\n\n// As the user can't change the locale, keep this 'cached'.\nconst weekDays = getWeekdaysDescriptions();\n\nfunction MonthlyCalendar({ dates }) {\n  return (\n    <div className=\"w-full flex-grow overflow-hidden flex flex-col\">\n      <MonthlyCalendarHeader weekDays={weekDays} />\n      <MonthlyCalendarGrid dates={dates} />\n    </div>\n  );\n}\n\nfunction mapStateToProps(state, props) {\n  const dates = getMonthlyCalendarGrid(state);\n  \n  return {\n    ...props,\n    dates,\n  };\n}\n\nexport default connect(mapStateToProps)(MonthlyCalendar);\n","import { createSelector } from 'reselect';\nimport { millisToDateTimeStrings } from '../../helpers/calendar';\n\nexport const getReminder = (state) => state.ui.reminder;\n\nexport const getFormattedReminder = createSelector(\n  [getReminder],\n  (reminder) => {\n    if (!reminder) return null;\n\n    return {\n      id: reminder.id,\n      event_type: reminder.event_type,\n      color: reminder.color,\n      platform: reminder.platform,\n      topic: reminder.topic,\n      ...millisToDateTimeStrings(reminder.dateTime),\n    };\n  }\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst PlusIcon = (props) => {\n  return (\n    <i className={props.className}>\n      <svg\n        className={props.svgClassName}\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"24\"\n        height=\"24\"\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n      >\n        <path\n          d=\"M18 6L6 18\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        />\n        <path\n          d=\"M6 6L18 18\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        />\n      </svg>\n    </i>\n  );\n};\n\nPlusIcon.propTypes = {\n  className: PropTypes.string,\n  svgClassName: PropTypes.string,\n};\n\nexport default PlusIcon;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport XIcon from '../../icons/XIcon';\n\nfunction ModalHeader({ children, onClose }) {\n  return (\n    <div className=\"flex flex-row flex-nowrap items-center justify-between\">\n      <div className=\"truncate\">{children}</div>\n      <button type=\"button\" className=\"p-1\" onClick={onClose}>\n        <XIcon svgClassName=\"w-6 h-6\" />\n      </button>\n    </div>\n  );\n}\n\nModalHeader.propTypes = {\n  children: PropTypes.node,\n  onClose: PropTypes.func.isRequired,\n};\n\nexport default ModalHeader;\n","import React, { Component, createRef } from 'react';\nimport PropTypes from 'prop-types';\n\nclass ModalBackdrop extends Component {\n  static propTypes = {\n    children: PropTypes.node,\n    onClick: PropTypes.func.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n    this.ref = createRef();\n  }\n\n  handleClick = (e) => {\n    if (e.target === this.ref.current) {\n      this.props.onClick();\n    }\n  };\n\n  render() {\n    return (\n      <div\n        ref={this.ref}\n        onClick={this.handleClick}\n        className=\"fixed top-0 left-0 flex flex-col lg:py-28 h-full w-full bg-black z-20 bg-opacity-30\"\n      >\n        {this.props.children}\n      </div>\n    );\n  }\n}\n\nexport default ModalBackdrop;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ModalBackdrop from './ModalBackdrop';\n\nfunction ModalResponsive({ children, onClose }) {\n  return (\n    <ModalBackdrop onClick={onClose}>\n      <div className=\"z-30 mx-auto w-full lg:max-w-2xl h-auto flex-grow lg:flex-grow-0 overflow-hidden overflow-y-scroll bg-white lg:shadow-lg lg:rounded-md\">\n        {children}\n      </div>\n    </ModalBackdrop>\n  );\n}\n\nModalResponsive.propTypes = {\n  children: PropTypes.node,\n  onClose: PropTypes.func.isRequired,\n};\n\nexport default ModalResponsive;\n","import React from 'react';\nimport classNames from 'classnames';\n\n// Should be used with Formik.Field component prop\nfunction FormTextInput({\n  field,\n  form: { touched, errors },\n  className,\n  ...props\n}) {\n  const hasError = touched[field.name] && Boolean(errors[field.name]);\n\n  return (\n    <input\n      type=\"text\"\n      className={classNames(\n        'placeholder-gray-400 bg-white border border-gray-300 focus:ring-indigo-500 focus:border-indigo-500 block w-auto shadow-sm rounded-md',\n        {\n          'ring-2 ring-red-500': hasError,\n        },\n        className\n      )}\n      {...field}\n      {...props}\n    />\n  );\n}\n\nexport default FormTextInput;\n","import React from 'react';\nimport classNames from 'classnames';\n\n// Should be used with Formik.Field component prop\nfunction FormDatePicker({\n  field,\n  form: { touched, errors },\n  className,\n  ...props\n}) {\n  const hasError = touched[field.name] && Boolean(errors[field.name]);\n\n  return (\n    <input\n      type=\"date\"\n      className={classNames(\n        'placeholder-gray-400 bg-white border border-gray-300 focus:ring-indigo-500 focus:border-indigo-500 block shadow-sm rounded-md',\n        {\n          'ring-2 ring-red-500': hasError,\n        },\n        className\n      )}\n      {...field}\n      {...props}\n    />\n  );\n}\n\nexport default FormDatePicker;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction FormErrorMessage({ children }) {\n  return (\n    <div className=\"text-xs sm:text-sm block text-red-500\">{children}</div>\n  );\n}\n\nFormErrorMessage.propTypes = {\n  children: PropTypes.string.isRequired,\n};\n\nexport default FormErrorMessage;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction FormLabel({ children, htmlFor }) {\n  return (\n    <label htmlFor={htmlFor} className=\"block font-medium text-gray-700 \">\n      {children}\n    </label>\n  );\n}\n\nFormLabel.propTypes = {\n  children: PropTypes.string.isRequired,\n  htmlFor: PropTypes.string.isRequired,\n};\n\nexport default FormLabel;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction FormFieldset({ children }) {\n  return <div className=\"flex flex-col gap-1\">{children}</div>;\n}\n\nFormFieldset.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default FormFieldset;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nfunction BaseButton({ children, className, ...props }) {\n  return (\n    <button\n      type=\"button\"\n      className={classNames(\n        'uppercase w-full sm:w-auto flex flex-row flex-nowrap items-center justify-center gap-2 px-4 py-2 shadow rounded text-lg font-medium transition-colors duration-150',\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </button>\n  );\n}\n\nBaseButton.propTypes = {\n  children: PropTypes.node.isRequired,\n  className: PropTypes.string,\n};\n\nexport default BaseButton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction FormActions({ children }) {\n  return (\n    <div className=\"mt-4 flex flex-row flex-wrap items-center justify-end\">\n      {children}\n    </div>\n  );\n}\n\nFormActions.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default FormActions;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst CheckIcon = (props) => {\n  return (\n    <i className={props.className}>\n      <svg\n        className={props.svgClassName}\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"24\"\n        height=\"24\"\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n      >\n        <path\n          d=\"M20 6L9 17L4 12\"\n          stroke=\"white\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        />\n      </svg>\n    </i>\n  );\n};\n\nCheckIcon.propTypes = {\n  className: PropTypes.string,\n  svgClassName: PropTypes.string,\n};\n\nexport default CheckIcon;\n","import React from 'react';\nimport classNames from 'classnames';\n\n// Should be used with Formik.Field component prop\nfunction FormTimePicker({\n  field,\n  form: { touched, errors },\n  className,\n  ...props\n}) {\n  const hasError = touched[field.name] && Boolean(errors[field.name]);\n\n  return (\n    <input\n      type=\"time\"\n      className={classNames(\n        'placeholder-gray-400 bg-white border border-gray-300 focus:ring-indigo-500 focus:border-indigo-500 block shadow-sm rounded-md',\n        {\n          'ring-2 ring-red-500': hasError,\n        },\n        className\n      )}\n      {...field}\n      {...props}\n    />\n  );\n}\n\nexport default FormTimePicker;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { getBackgroundColor } from '../../helpers/colors';\n\nfunction ReminderColorCircle({ colorName }) {\n  return (\n    <div\n      className={classNames(\n        'w-6 h-6 rounded-full',\n        getBackgroundColor(colorName)\n      )}\n    >\n      <span className=\"sr-only\">Color: {colorName}</span>\n    </div>\n  );\n}\n\nReminderColorCircle.propTypes = {\n  colorName: PropTypes.string.isRequired,\n};\n\nexport default ReminderColorCircle;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst PlusIcon = (props) => {\n  return (\n    <i className={props.className}>\n      <svg\n        className={props.svgClassName}\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"20\"\n        height=\"20\"\n        viewBox=\"0 0 20 20\"\n        fill=\"currentColor\"\n      >\n        <path\n          fillRule=\"evenodd\"\n          d=\"M10 3a1 1 0 01.707.293l3 3a1 1 0 01-1.414 1.414L10 5.414 7.707 7.707a1 1 0 01-1.414-1.414l3-3A1 1 0 0110 3zm-3.707 9.293a1 1 0 011.414 0L10 14.586l2.293-2.293a1 1 0 011.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z\"\n          clipRule=\"evenodd\"\n        />\n      </svg>\n    </i>\n  );\n};\n\nPlusIcon.propTypes = {\n  className: PropTypes.string,\n  svgClassName: PropTypes.string,\n};\n\nexport default PlusIcon;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ReminderColorCircle from './ReminderColorCircle';\n\nfunction ReminderColorPickerItem({ colorName, onClick }) {\n  return (\n    <li\n      tabIndex=\"0\"\n      id=\"listbox-item-0\"\n      role=\"option\"\n      aria-selected={false}\n      className=\"cursor-pointer select-none relative p-2 transition duration-200 hover:bg-indigo-100\"\n      onClick={onClick}\n    >\n      <div className=\"flex items-center justify-center\">\n        <ReminderColorCircle colorName={colorName} />\n      </div>\n    </li>\n  );\n}\n\nReminderColorPickerItem.propTypes = {\n  colorName: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default ReminderColorPickerItem;\n","import React, { Component, createRef } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport ReminderColorCircle from './ReminderColorCircle';\nimport ExpandIcon from '../icons/ExpandIcon';\nimport { ALL_COLORS } from '../../helpers/colors';\nimport ReminderColorPickerItem from './ReminderColorPickerItem';\n\n// Should be used with Formik.Field `as` prop\nclass ReminderColorPicker extends Component {\n  static propTypes = {\n    value: PropTypes.oneOf(ALL_COLORS).isRequired,\n    onBlur: PropTypes.func.isRequired,\n    onChange: PropTypes.func.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.ref = createRef();\n  }\n\n  state = {\n    open: false,\n  };\n\n  toggleOpen = () => {\n    this.setState((prevState) => ({\n      open: !prevState.open,\n    }));\n  };\n\n  close = () => {\n    this.setState(() => ({\n      open: false,\n    }));\n  };\n\n  handleOutsideClick = (e) => {\n    if (this.ref.current !== null && !this.ref.current.contains(e.target)) {\n      this.close();\n    }\n  };\n\n  handleSelectColor = (colorName) => {\n    this.props.onChange({\n      target: {\n        name: this.props.name,\n        value: colorName,\n      },\n    });\n    this.close();\n  };\n\n  renderColorList = () => {\n    const { value } = this.props;\n\n    return (\n      <div className=\"absolute mt-1 w-full rounded-md bg-white shadow-lg\">\n        <ul\n          tabIndex=\"0\"\n          role=\"listbox\"\n          aria-labelledby=\"listbox-label\"\n          aria-activedescendant=\"listbox-item-3\"\n          className=\"max-h-56 rounded-md py-1 text-base ring-1 ring-black ring-opacity-5 overflow-auto focus:outline-none sm:text-sm\"\n        >\n          {ALL_COLORS.filter((color) => color !== value).map((colorName) => (\n            <ReminderColorPickerItem\n              key={colorName}\n              colorName={colorName}\n              onClick={() => this.handleSelectColor(colorName)}\n            />\n          ))}\n        </ul>\n      </div>\n    );\n  };\n\n  componentDidMount() {\n    document.addEventListener('click', this.handleOutsideClick);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('click', this.handleOutsideClick);\n  }\n\n  render() {\n    const { className, name, value } = this.props;\n\n    return (\n      <div ref={this.ref} name={name} className=\"relative\">\n        <button\n          type=\"button\"\n          aria-haspopup=\"listbox\"\n          aria-expanded=\"true\"\n          aria-labelledby=\"listbox-label\"\n          className={classNames(\n            'relative w-auto bg-white border border-gray-300 rounded-md shadow-sm pl-3 pr-10 py-2 text-left cursor-default focus:outline-none focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm',\n            className\n          )}\n          onClick={this.toggleOpen}\n        >\n          <span className=\"flex items-center\">\n            <ReminderColorCircle colorName={value} />\n          </span>\n          <span className=\"ml-3 absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none\">\n            <ExpandIcon svgClassName=\"h-5 w-5 text-gray-400\" />\n          </span>\n        </button>\n\n        {this.state.open && this.renderColorList()}\n      </div>\n    );\n  }\n}\n\nexport default ReminderColorPicker;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport FormTextInput from '../shared/forms/FormTextInput';\nimport FormDatePicker from '../shared/forms/FormDatePicker';\nimport FormErrorMessage from '../shared/forms/FormErrorMessage';\nimport FormLabel from '../shared/forms/FormLabel';\nimport FormFieldset from '../shared/forms/FormFieldset';\nimport BaseButton from '../shared/buttons/BaseButton';\nimport FormActions from '../shared/forms/FormActions';\nimport CheckIcon from '../icons/CheckIcon';\nimport {\n  DATE_FORMAT,\n  DATE_REGEX,\n  TIME_FORMAT,\n  TIME_REGEX,\n} from '../../helpers/calendar';\nimport FormTimePicker from '../shared/forms/FormTimePicker';\nimport ReminderColorPicker from './ReminderColorPicker';\nimport { ALL_COLORS } from '../../helpers/colors';\nimport { ReminderPropType } from '../shared/prop-types/reminder';\n\nconst ReminderSchema = Yup.object().shape({\n  event_type: Yup.string()\n    .max(30, 'No more than 30 character, please.')\n    .required('Please enter Event Type (max. 30 characters).'),\n  topic: Yup.string()\n    .max(30, 'No more than 30 character, please.')\n    .required('Please enter Event Topic (max. 30 characters).'),\n  color: Yup.string()\n    .oneOf(ALL_COLORS, 'Color is invalid.')\n    .required('Please inform a color.'),\n  date: Yup.string()\n    .matches(DATE_REGEX, `Date must be valid (${DATE_FORMAT}).`)\n    .required('Please inform the day you want to get reminded.'),\n  time: Yup.string()\n    .matches(TIME_REGEX, `Time must be valid (${TIME_FORMAT}).`)\n    .required('Please inform the time of the day you want to get reminded.'),\n  platform: Yup.string()\n    .max(30, 'No more than 30 character, please.')\n    .required('Please enter Event platform (max. 30 characters).'),\n});\n\nclass ReminderForm extends Component {\n  static propTypes = {\n    reminder: ReminderPropType.isRequired,\n    onSubmit: PropTypes.func.isRequired,\n  };\n\n  getInitialValues = () => {\n    const { event_type, color,topic, date, time, platform } = this.props.reminder;\n\n    return {\n      event_type,\n      color,\n      topic,\n      date,\n      time,\n      platform,\n    };\n  };\n\n  handleSubmit = (values) => {\n    var idVal = this.props.reminder.id;\n\n    if(values.init!=null){\n      idVal = values.id;\n    }\n\n    this.props.onSubmit({\n      id: idVal,\n      event_type: values.event_type,\n      color: values.color,\n      topic: values.topic,\n      platform: values.platform,\n      date: values.date,\n      time: values.time,\n    });\n  };\n\n  render() {\n    return (\n      <Formik\n        initialValues={this.getInitialValues()}\n        validationSchema={ReminderSchema}\n        onSubmit={this.handleSubmit}\n      >\n        <Form className=\"w-full flex flex-col gap-3\">\n          <FormFieldset>\n            <FormLabel htmlFor=\"event_type\">\n              Event Type\n            </FormLabel>\n            <div className=\"flex flex-row flex-wrap gap-2\">\n              <Field\n                id=\"event_type\"\n                name=\"event_type\"\n                component={FormTextInput}\n                placeholder=\"e.g.: Club Service\"\n                className=\"flex-grow\"\n              />\n              <Field\n                name=\"color\"\n                as={ReminderColorPicker}\n                className=\"flex-shrink\"\n              />\n            </div>\n            <ErrorMessage component={FormErrorMessage} name=\"event_type\" />\n            <ErrorMessage component={FormErrorMessage} name=\"color\" />\n          </FormFieldset>\n\n          <FormFieldset>\n            <FormLabel htmlFor=\"topic\">Topic</FormLabel>\n            <Field\n              id=\"topic\"\n              name=\"topic\"\n              component={FormTextInput}\n              placeholder=\"e.g.: Metamorphosis\"\n            />\n            <ErrorMessage component={FormErrorMessage} name=\"topic\" />\n          </FormFieldset>\n\n          <FormFieldset>\n            <FormLabel htmlFor=\"date\">When?</FormLabel>\n\n            <div className=\"flex flex-row flex-wrap gap-2\">\n              <Field\n                id=\"date\"\n                name=\"date\"\n                component={FormDatePicker}\n                className=\"flex-grow\"\n              />\n              <Field\n                id=\"time\"\n                name=\"time\"\n                component={FormTimePicker}\n                className=\"w-full sm:w-44\"\n              />\n            </div>\n            <ErrorMessage component={FormErrorMessage} name=\"date\" />\n            <ErrorMessage component={FormErrorMessage} name=\"time\" />\n          </FormFieldset>\n\n          <FormFieldset>\n            <FormLabel htmlFor=\"platform\">Platform</FormLabel>\n            <Field\n              id=\"platform\"\n              name=\"platform\"\n              component={FormTextInput}\n              placeholder=\"e.g.: Google Meet\"\n            />\n            <ErrorMessage component={FormErrorMessage} name=\"platform\" />\n          </FormFieldset>\n\n          <FormActions>\n            <BaseButton\n              type=\"submit\"\n              className=\"bg-indigo-700 hover:bg-indigo-500 text-white\"\n            >\n              <CheckIcon svgClassName=\"w-6 h-6\" />\n              Confirm\n            </BaseButton>\n          </FormActions>\n        </Form>\n      </Formik>\n    );\n  }\n}\n\nexport default ReminderForm;\n","import PropTypes from 'prop-types';\nimport { ALL_COLORS } from '../../../helpers/colors';\n\nexport const ReminderPropType = PropTypes.shape({\n  id: PropTypes.string,\n  event_type: PropTypes.string.isRequired,\n  color: PropTypes.oneOf(ALL_COLORS).isRequired,\n  topic: PropTypes.string.isRequired,\n  date: PropTypes.string.isRequired,\n  time: PropTypes.string.isRequired,\n  platform: PropTypes.string.isRequired,\n});\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ModalHeader from '../shared/modal/ModalHeader';\nimport ModalResponsive from '../shared/modal/ModalResponsive';\nimport ReminderForm from './ReminderForm';\nimport { ReminderPropType } from '../shared/prop-types/reminder';\n\nclass ReminderModal extends Component {\n  render() {\n    const { reminder, onClose, onSubmit } = this.props;\n    const isNew = !Boolean(reminder.id);\n\n    return (\n      <ModalResponsive onClose={onClose}>\n        <div className=\"w-full h-full overflow-y-auto p-8 flex flex-col gap-8\">\n          <ModalHeader onClose={onClose}>\n            <h2 className=\"uppercase font-medium text-xl\">\n              {isNew ? 'New' : 'Edit'} Reminder\n            </h2>\n          </ModalHeader>\n\n          <ReminderForm reminder={reminder} onSubmit={onSubmit} />\n        </div>\n      </ModalResponsive>\n    );\n  }\n}\n\nReminderModal.propTypes = {\n  reminder: ReminderPropType.isRequired,\n  onClose: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default ReminderModal;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { closeReminder, submitReminder } from '../../actions/ui/reminder';\nimport { getFormattedReminder } from '../../selectors/ui/reminder';\nimport ReminderModal from './ReminderModal';\n\nfunction ReminderContainer({ reminder, closeReminder, submitReminder }) {\n  if (!reminder) return null;\n\n  return (\n    <ReminderModal\n      reminder={reminder}\n      onClose={closeReminder}\n      onSubmit={submitReminder}\n    />\n  );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    reminder: getFormattedReminder(state),\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({ closeReminder, submitReminder }, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ReminderContainer);\n","import React, { Component } from 'react';\nimport { DateTime, } from 'luxon';\nimport { connect } from 'react-redux';\nimport { setMonth } from '../actions/ui/month';\nimport { submitReminder } from '../actions/ui/reminder';\nimport { getMonth } from '../selectors/ui/month';\nimport AppHeader from './AppHeader';\nimport { getMonthlyCalendarGrid, dateTimeStringsToMillis, millisToDateTimeStrings } from '../helpers/calendar';\nimport MonthlyCalendar from './calendar/MonthlyCalendar';\nimport ReminderContainer from './reminders/ReminderContainer';\nimport Axios from 'axios';\n\nfunction setNavigationBarHeightCSSVariable() {\n  const vh = window.innerHeight * 0.01;\n  document.documentElement.style.setProperty('--vh', vh + 'px');\n}\n\nclass App extends Component {\n  async componentDidMount() {\n    window.addEventListener('resize', setNavigationBarHeightCSSVariable);\n\n    if (this.props.month === null) {\n      this.props.dispatch(setMonth(DateTime.local().toFormat('yyyy-MM')));\n    }\n\n    const data = getMonthlyCalendarGrid(DateTime.local().toFormat('yyyy-MM'));\n\n    const first = data[0].key;\n    const last = data[34].key;\n\n    const minTime = dateTimeStringsToMillis(first,\"00:00\");\n    const maxTime = dateTimeStringsToMillis(last,\"23:59\");\n\n    const response = await Axios.post(\"http://calendar.wcewlug.org/api/get_remainder\",{min: minTime, max: maxTime});\n    console.log(response);\n    for(const index in response.data) {\n      const reminder = response.data[index];\n\n      const reminderToSet = {\n        ...millisToDateTimeStrings(reminder.dateTime),\n        id: reminder.id,\n        event_type: reminder.event_type,\n        color: reminder.color,\n        platform: reminder.platform,\n        topic: reminder.topic,\n      };\n\n      this.props.dispatch(submitReminder({reminder: reminderToSet,init: true}));\n    }\n\n    // this.props.dispatch(submitReminder({reminder: {color: \"indigo-600\", ...millisToDateTimeStrings(1622546280000), event_type: \"Club Service\", id: \"3d2po4axvsypp9iops3bzo\", platform: \"Google Meet\", topic: \"Meta\"},init: true}));\n\n    // this.props.dispatch(initReminders(DateTime.local().toFormat('yyyy-MM')));\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', setNavigationBarHeightCSSVariable);\n  }\n\n  render() {\n    return (\n      <div className=\"h-screen-nav-fix w-screen font-montserrat overflow-hidden bg-gray-50 text-gray-900\">\n        <div className=\"w-full h-full flex flex-col\">\n          <AppHeader />\n          <MonthlyCalendar />\n          <ReminderContainer />\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state, props) {\n  return {\n    ...props,\n    month: getMonth(state),\n  };\n}\n\nexport default connect(mapStateToProps)(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from 'redux';\nimport month from './month';\nimport reminder from './reminder';\n\nexport default combineReducers({\n  month,\n  reminder,\n});\n","import { SET_MONTH } from '../../actions/ui/month';\n\nexport default function month(state = null, action) {\n  switch (action.type) {\n    case SET_MONTH:\n      return action.payload;\n\n    default:\n      return state;\n  }\n}\n","import { OPEN_REMINDER, CLOSE_REMINDER } from '../../actions/ui/reminder';\n\nexport default function reminder(state = null, action) {\n  switch (action.type) {\n    case OPEN_REMINDER:\n      return action.payload;\n\n    case CLOSE_REMINDER:\n      return null;\n\n    default:\n      return state;\n  }\n}\n","export const SET_DATE_REMINDER = 'ADD_DATE_REMINDER';\n\nexport function setDateReminder({ date, reminderId }) {\n  return {\n    type: SET_DATE_REMINDER,\n    payload: {\n      date,\n      reminderId,\n    },\n  };\n}\n","import { SET_DATE_REMINDER } from '../actions/dates';\n\nfunction filterDateReminders(dates, reminderIdToExclude) {\n  return Object.values(dates).reduce((filtered, existing) => {\n    return {\n      ...filtered,\n      [existing.id]: {\n        ...existing,\n        reminders: existing.reminders.filter(\n          (reminderId) => reminderId !== reminderIdToExclude\n        ),\n      },\n    };\n  }, {});\n}\n\nexport default function dates(state = {}, action) {\n  switch (action.type) {\n    case SET_DATE_REMINDER:\n      const entry = state[action.payload.date] ?? {\n        id: action.payload.date,\n        reminders: [],\n      };\n\n      return {\n        ...filterDateReminders(state, action.payload.reminderId),\n        [entry.id]: {\n          ...entry,\n          reminders: Array.from(\n            new Set([...entry.reminders, action.payload.reminderId])\n          ),\n        },\n      };\n\n    default:\n      return state;\n  }\n}\n","export const SET_REMINDER = 'SET_REMINDER';\nexport const INIT_REMINDERS = 'INIT_REMINDERS';\n\nexport function setReminder(reminder) {\n  return {\n    type: SET_REMINDER,\n    payload: reminder,\n  };\n}\n\nexport function initReminders(month) {\n  return {\n    type: INIT_REMINDERS,\n    payload: month,\n  };\n}\n","import { combineReducers } from 'redux';\nimport ui from './ui';\nimport dates from './dates';\nimport reminders from './reminders';\n\nexport default combineReducers({\n  ui,\n  dates,\n  reminders,\n});\n","import { SET_REMINDER, } from '../actions/reminders';\n\nexport default function reminders(state = {}, action) {\n  switch (action.type) {\n    case SET_REMINDER:\n      return {\n        ...state,\n        [action.payload.id]: action.payload,\n      };\n\n    default:\n      return state;\n  }\n}\n","/*\n    I need to get unique id from backend!!!\n*/\nimport Axios from 'axios';\n\nasync function getUUID() {\n\n  const response = await Axios.get(\"http://calendar.wcewlug.org/api/getuuid\");\n  const data = await response.data.uuid;\n\n  return data;\n}\n\nexport async function generateUUID() {\n  return (\n    getUUID()\n  );\n}\n","import { DateTime } from 'luxon';\nimport { apply, call, put, takeEvery } from 'redux-saga/effects';\nimport { setDateReminder } from '../../actions/dates';\nimport { setReminder } from '../../actions/reminders';\nimport * as reminderUIActions from '../../actions/ui/reminder';\nimport { dateTimeStringsToMillis, DATE_FORMAT } from '../../helpers/calendar';\nimport { DEFAULT_COLOR } from '../../helpers/colors';\nimport { generateUUID } from '../../helpers/uuid';\nimport Axios from 'axios';\n\nexport function* openReminder(reminder) {\n  yield put(reminderUIActions.openReminder(reminder));\n}\n\nexport function* newReminder(action) {\n  const initialDate = action.payload;\n  let initialDateTime = yield apply(DateTime, 'local');\n\n  if (initialDate) {\n    const parsed = DateTime.fromFormat(initialDate, DATE_FORMAT);\n    if (parsed.isValid) {\n      initialDateTime = initialDateTime.set({\n        year: parsed.year,\n        month: parsed.month,\n        day: parsed.day,\n      });\n    }\n  }\n\n  const initialColor = DEFAULT_COLOR;\n\n  const reminder = {\n    id: null,\n    event_type: '',\n    color: initialColor,\n    dateTime: initialDateTime.toMillis(),\n    platform: '',\n    topic: '',\n  };\n\n  yield call(openReminder, reminder);\n}\n\nexport function* editReminder(action) {\n  yield call(openReminder, action.payload);\n}\n\nexport function* submitReminder(action) {\n  console.log(action);\n\n  var reminder;\n\n  if(action.payload.init){\n      reminder = action.payload.reminder;\n  }\n  else{\n    reminder = action.payload;\n  }\n\n  let id = reminder.id;\n  \n  if (!id) {\n    id = yield call(generateUUID);\n  }\n\n  const reminderToSet = {\n    id,\n    event_type: reminder.event_type,\n    color: reminder.color,\n    dateTime: dateTimeStringsToMillis(reminder.date, reminder.time),\n    platform: reminder.platform,\n    topic: reminder.topic,\n  };\n\n  const dateReminder = { date: reminder.date, reminderId: reminderToSet.id };\n\n  // TODO: Save do IDB (with dexie)\n\n  yield put(setReminder(reminderToSet));\n  yield put(setDateReminder(dateReminder));\n\n  /*\n    API call to update te content\n  */\n  if(!action.payload.init)\n  {\n    Axios.post(\"http://calendar.wcewlug.org/api/set_remainder\",reminderToSet).then(function (response) {\n      console.log(response);\n    })\n\n    yield put(reminderUIActions.closeReminder());\n  }\n\n  console.log(reminderToSet);\n}\n\nexport function* watchNewReminder() {\n  yield takeEvery(reminderUIActions.NEW_REMINDER, newReminder);\n}\n\nexport function* watchEditReminder() {\n  yield takeEvery(reminderUIActions.EDIT_REMINDER, editReminder);\n}\n\nexport function* watchSubmitReminder() {\n  yield takeEvery(reminderUIActions.SUBMIT_REMINDER, submitReminder);\n}\n","import { all, call, spawn } from 'redux-saga/effects';\nimport { IS_PRODUCTION } from '../config/env';\nimport { watchAndLog } from './logger';\nimport {\n  watchEditReminder,\n  watchNewReminder,\n  watchSubmitReminder,\n} from './ui/reminder';\n\n/**\n * Spawns given sagas, restarting them if they throw any uncaught error.\n * @param  {...GeneratorFunction} sagas The sagas to spawn and keep alive\n */\nfunction* keepAlive(...sagas) {\n  yield all(\n    sagas.map((saga) =>\n      spawn(function* () {\n        while (true) {\n          try {\n            // Start the worker saga\n            yield call(saga);\n            // If it finishes, exit\n            break;\n          } catch (e) {\n            // If an error happens it will be logged\n            // and the loop will restart the saga\n            console.groupCollapsed(\n              `%cSaga ${saga.name} crashed and will be restarted...`,\n              `\n                font-size: 600;\n                color: #DC2626;\n                background-color: #FECACA;\n                padding: 0.125rem 0.25rem;\n                border-radius: 0.125rem;\n              `\n            );\n            console.error(e);\n            console.groupEnd();\n          }\n        }\n      })\n    )\n  );\n}\n\nexport default function* rootSaga() {\n\n  const sagas = [\n    watchNewReminder,\n    watchEditReminder,\n    watchSubmitReminder,\n  ];\n  if (!IS_PRODUCTION) {\n    sagas.unshift(watchAndLog);\n  }\n\n  yield keepAlive(...sagas);\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { applyMiddleware, createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { Provider } from 'react-redux';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\nimport reducers from './reducers';\nimport rootSaga from './sagas';\nimport './css/index.css';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(reducers, applyMiddleware(sagaMiddleware));\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}